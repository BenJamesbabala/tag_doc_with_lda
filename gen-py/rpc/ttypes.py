#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class Doc_Info:
  """
  Attributes:
   - docid
   - text
   - consinesim
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'docid', None, "", ), # 1
    (2, TType.STRING, 'text', None, None, ), # 2
    (3, TType.DOUBLE, 'consinesim', None, 0, ), # 3
  )

  def __init__(self, docid=thrift_spec[1][4], text=None, consinesim=thrift_spec[3][4],):
    self.docid = docid
    self.text = text
    self.consinesim = consinesim

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.docid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.text = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.consinesim = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Doc_Info')
    if self.docid is not None:
      oprot.writeFieldBegin('docid', TType.STRING, 1)
      oprot.writeString(self.docid)
      oprot.writeFieldEnd()
    if self.text is not None:
      oprot.writeFieldBegin('text', TType.STRING, 2)
      oprot.writeString(self.text)
      oprot.writeFieldEnd()
    if self.consinesim is not None:
      oprot.writeFieldBegin('consinesim', TType.DOUBLE, 3)
      oprot.writeDouble(self.consinesim)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.docid)
    value = (value * 31) ^ hash(self.text)
    value = (value * 31) ^ hash(self.consinesim)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Topic_Info:
  """
  Attributes:
   - topicid
   - topicwords
   - doclist
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'topicid', None, -1, ), # 1
    (2, TType.STRING, 'topicwords', None, "", ), # 2
    (3, TType.LIST, 'doclist', (TType.STRUCT,(Doc_Info, Doc_Info.thrift_spec)), [
    ], ), # 3
  )

  def __init__(self, topicid=thrift_spec[1][4], topicwords=thrift_spec[2][4], doclist=thrift_spec[3][4],):
    self.topicid = topicid
    self.topicwords = topicwords
    if doclist is self.thrift_spec[3][4]:
      doclist = [
    ]
    self.doclist = doclist

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.topicid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.topicwords = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.doclist = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = Doc_Info()
            _elem5.read(iprot)
            self.doclist.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Topic_Info')
    if self.topicid is not None:
      oprot.writeFieldBegin('topicid', TType.I32, 1)
      oprot.writeI32(self.topicid)
      oprot.writeFieldEnd()
    if self.topicwords is not None:
      oprot.writeFieldBegin('topicwords', TType.STRING, 2)
      oprot.writeString(self.topicwords)
      oprot.writeFieldEnd()
    if self.doclist is not None:
      oprot.writeFieldBegin('doclist', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.doclist))
      for iter6 in self.doclist:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.topicid)
    value = (value * 31) ^ hash(self.topicwords)
    value = (value * 31) ^ hash(self.doclist)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
